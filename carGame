<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
<style>


body {
      margin: 0;
      overflow: hidden;
      font-family: Arial, sans-serif;
      background-color: #000;
    }

    canvas {
      display: block;
    }

    .ui-container {
      position: absolute;
      top: 10px;
      left: 10px;
      right: 10px;
      z-index: 100;
      color: #fff;
      text-shadow: 1px 1px 2px black;
    }

    #info {
      background: rgba(0, 0, 0, 0.5);
      padding: 10px;
      border-radius: 10px;
      text-align: center;
      max-width: 400px;
      margin: 0 auto 10px auto;
    }

    #reset-button {
      top: 0;
      right: 0;
      padding: 10px 15px;
      background-color: #ff4500;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 1em;
      font-weight: bold;
    }

    #loading {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      color: white;
      font-size: 2em;
      text-align: center;
    }

    /* On-screen mobile controls */
    #mobile-controls {
      display: block;
      /* Hidden by default */
      position: absolute;
      bottom: 20px;
      width: 100%;
      z-index: 101;
      -webkit-user-select: none;
      /* Safari */
      -ms-user-select: none;
      /* IE 10+ */
      user-select: none;
    }

    .control-button {
      position: absolute;
      width: 50px;
      height: 50px;
      background: rgba(255, 255, 255, 0.3);
      border: 2px solid rgba(255, 255, 255, 0.5);
      border-radius: 50%;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 2em;
      color: white;
      cursor: pointer;
    }

    #forward {
      bottom: 120px;
      right: 40px;
    }

    #brake {
      bottom: 60px;
      right: 40px;
    }

    #reverse {
      bottom: 0;
      right: 40px;
    }

    #left {
      bottom: 35px;
      left: 40px;
    }

    #right {
      bottom: 35px;
      left: 120px;
    }

</style>
    <title>3D car Driving Game</title>
</head>

<body>
    <div id="loading">
        <div>Loading...</div>
        <small>This may take a moment</small>
    </div>
    <div class="ui-container"
        style="display: flex; gap: 12px; align-items: flex-start; position: absolute; top: 10px; left: 10px; right: 10px; z-index: 100;">
        <button id="dissbreak-button"
            style="background: #222; color: #fff; padding: 8px 18px; border-radius: 8px; font-size: 1em; font-weight: bold; cursor: pointer;">
            Dissbreak: OFF
        </button>
        <button id="reset-button">Reset vehicle</button>
        <button id="camera-button"
            style="background:#222;color:#fff;padding:8px 18px;border-radius:8px;font-size:1em;font-weight:bold;cursor:pointer;">
            Change Camera
        </button>
    </div>
    <button id="info-btn"
        style="position: absolute; top: 16px; right: 16px; z-index: 200; background: #222; color: #fff; border: none; border-radius: 50%; width: 24px; height: 24px; font-size: 1.1em; cursor: pointer; display: flex; align-items: center; justify-content: center;">
        ‚ÑπÔ∏è
    </button>
    <div id="info-modal"
        style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(0,0,0,0.7); z-index:9999; align-items:center; justify-content:center;">
        <div
            style="background:#222; color:#fff; max-width:400px; margin:auto; padding:32px 24px 24px 24px; border-radius:16px; position:relative; box-shadow:0 4px 32px #000;">
            <button id="close-info"
                style="position:absolute;top:8px;right:12px;background:none;border:none;color:#fff;font-size:1.5em;cursor:pointer;">‚úñ</button>
            <h2 style="margin-top:0;">Game Info & Controls</h2>
            <ul style="padding-left:18px;">
                <li><b>Arrow Keys(pc)</b>: Drive & steer</li>
                <li><b>Space(pc)</b>: Brake</li>
                <li><b>InstantBreak</b>: Toggle instant stop (button)</li>
                <li><b>Reset Vehicle</b>: Reset car to center (button)</li>
                <li><b>Change Camera(c:(pc))</b>: Switch camera view (button)</li>
                <li><b>Speedometer</b>: Shows current speed (km/h)</li>
                <li><b>Distance</b>: Shows distance from center (meters)</li>
                <li><b>Mobile Controls</b>: On-screen buttons for touch devices</li>
                <li>There is an invisible walls at ground edge prevent falling : <b>Drive safelyüòÅ</b></li>
                <li><b>Wanna real sound experience :</b> <a href="https://3-d-car-driving.vercel.app/">Game with Sound Experience</a></li>
                <li><b>github link : </b> <a href="https://github.com/officialtyagi/3D-Car-Driving">View complete code</a></li>
            </ul>
            <hr style="border:1px solid #444;">
            <div style="font-size:0.9em;opacity:0.7;">
                <b>Code:</b> Three.js + Cannon-es<br>
                <b>Author:</b> Abhishek Tyagi<br>
                <b>Project:</b> 3D Car Driving Game
            </div>
        </div>
    </div>
    <div id="speedometer" style="
          position: absolute;
          color: white;
          left: 20px;
          top: 70px;
          background: rgba(0, 0, 0, 0.6);
          padding: 8px 18px;
          border-radius: 8px;
          font-size: 1em;
          font-family: monospace;
        ">
        Speed: <span id="speed-value">0.0</span> km/h
    </div>
    <!-- Add this below the speedometer div: -->
    <div id="distance-meter" style="
  position: absolute;
  color: white;
  right: 20px;
  top: 70px;
  background: rgba(0, 0, 0, 0.6);
  padding: 8px 18px;
  border-radius: 8px;
  font-size: 1em;
  font-family: monospace;
">
        Distance: <span id="distance-value">0.0</span> m
    </div>

    <div id="mobile-controls">
        <div id="forward" class="control-button">‚ñ≤</div>
        <div id="brake" class="control-button">
            ‚ñ†
        </div>
        <div id="reverse" class="control-button">‚ñº</div>
        <div id="left" class="control-button">‚óÄ</div>
        <div id="right" class="control-button">‚ñ∂</div>
    </div>

    <script type="importmap">
      {
        "imports": {
          "three": "https://unpkg.com/three@0.163.0/build/three.module.js",
          "three/addons/": "https://unpkg.com/three@0.163.0/examples/jsm/",
          "cannon-es": "https://unpkg.com/cannon-es@0.20.0/dist/cannon-es.js"
        }
      }
    </script>

    <script type="module">
        import * as THREE from "three";
        import * as CANNON from "cannon-es";

        let scene, camera, renderer, world, clock;
        let car, vehicle;
        const keys = {
            ArrowUp: false,
            ArrowDown: false,
            ArrowLeft: false,
            ArrowRight: false,
            Space: false,
        };
        const maxSteerVal = 1;
        const maxForce = 1500;
        let hayBales = [];
        let wheelMeshes = [];
        let steeringWheel;
        let cameraMode = 1;
        let dissbreakEnabled = false;

        const dissbreakBtn = document.getElementById("dissbreak-button");
        dissbreakBtn.addEventListener("click", () => {
            dissbreakEnabled = !dissbreakEnabled;
            dissbreakBtn.textContent =
                "Dissbreak: " + (dissbreakEnabled ? "ON" : "OFF");
        });
        dissbreakBtn.addEventListener("keydown", (e) => {
            if (e.code === "Space" || e.key === " " || e.key === "Spacebar") {
                e.preventDefault(); // Prevent Space from triggering a click on the button
            }
        });
        dissbreakBtn.addEventListener("keyup", (e) => {
            if (e.code === "Space" || e.key === " " || e.key === "Spacebar") {
                e.preventDefault();
            }
        });
        const cameraBtn = document.getElementById("camera-button");
        cameraBtn.addEventListener("click", () => {
            cameraMode = (cameraMode + 1) % 4;
        });
        cameraBtn.addEventListener("keydown", (e) => {
            if (e.code === "Space" || e.key === " " || e.key === "Spacebar") {
                e.preventDefault(); // Prevent Space from triggering a click on the button
            }
        });
        cameraBtn.addEventListener("keyup", (e) => {
            if (e.code === "Space" || e.key === " " || e.key === "Spacebar") {
                e.preventDefault();
            }
        });
        // --- Initialization ---
        init();

        function init() {
            clock = new THREE.Clock();

            // Scene
            scene = new THREE.Scene();
            scene.fog = new THREE.Fog(0x87ceeb, 50, 300);

            // Camera
            camera = new THREE.PerspectiveCamera(
                75,
                window.innerWidth / window.innerHeight,
                0.1,
                1000
            );
            camera.position.set(0, 8, 15);

            // Renderer
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.shadowMap.enabled = true;
            renderer.shadowMap.type = THREE.PCFSoftShadowMap;
            document.body.appendChild(renderer.domElement);

            // Lights
            const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444, 1.5);
            hemiLight.position.set(0, 100, 0);
            scene.add(hemiLight);

            const dirLight = new THREE.DirectionalLight(0xffffff, 1.8);
            dirLight.position.set(50, 50, 50);
            dirLight.castShadow = true;
            dirLight.shadow.mapSize.set(2048, 2048);
            dirLight.shadow.camera.left = -100;
            dirLight.shadow.camera.right = 100;
            dirLight.shadow.camera.top = 100;
            dirLight.shadow.camera.bottom = -100;
            scene.add(dirLight);

            // Physics World
            world = new CANNON.World({ gravity: new CANNON.Vec3(0, -9.82, 0) });
            world.broadphase = new CANNON.SAPBroadphase(world);
            world.solver.iterations = 10;

            // Materials
            const groundMat = new CANNON.Material("ground");
            const wheelMat = new CANNON.Material("wheel");
            const wheelGroundContact = new CANNON.ContactMaterial(
                wheelMat,
                groundMat,
                {
                    friction: 0.5,
                    restitution: 0,
                    contactEquationStiffness: 1000,
                }
            );
            world.addContactMaterial(wheelGroundContact);

            // Load assets and build the scene
            const loadingManager = new THREE.LoadingManager(() => {
                const loadingScreen = document.getElementById("loading");
                loadingScreen.style.display = "none";
                document.querySelector(".ui-container").style.display = "flex";
                if ("ontouchstart" in window) {
                    document.getElementById("mobile-controls").style.display = "block";
                }
                animate();
            });

            const textureLoader = new THREE.TextureLoader(loadingManager);
            const cubeTextureLoader = new THREE.CubeTextureLoader(loadingManager);


            createSkybox(cubeTextureLoader);
            createGround(groundMat, textureLoader);
            createSportsCar(wheelMat);
            createTrees();
            createHayBales(20);

            setupControls();
        }

        function createSkybox(loader) {
            const texture = loader
                .setPath(
                    "https://threejs.org/examples/textures/cube/MilkyWay/"
                )
                .load(["dark-s_px.jpg", "dark-s_nx.jpg", "dark-s_py.jpg", "dark-s_ny.jpg", "dark-s_pz.jpg", "dark-s_nz.jpg"]);
            scene.background = texture;
        }

        function createGround(groundMat, textureLoader) {
            const groundTexture = textureLoader.load(
                "https://threejs.org/examples/textures/terrain/grasslight-big.jpg"
            );
            groundTexture.wrapS = groundTexture.wrapT = THREE.RepeatWrapping;
            groundTexture.repeat.set(10, 10);
            groundTexture.anisotropy = 16;

            const groundMaterial = new THREE.MeshStandardMaterial({
                map: groundTexture,
                roughness: 8,
                metalness: 0.1,
            });

            const groundSegments = 3;
            const groundSize = 600;
            const geometry = new THREE.PlaneGeometry(
                groundSize,
                groundSize,
                groundSegments,
                groundSegments
            );
            geometry.rotateX(-Math.PI / 2);
            const mesh = new THREE.Mesh(geometry, groundMaterial);
            mesh.receiveShadow = true;
            scene.add(mesh);

            // Physics Heightfield
            const matrix = [];
            for (let j = 0; j <= groundSegments; j++) {
                const row = [];
                for (let i = 0; i <= groundSegments; i++) {
                    const index = j * (groundSegments + 1) + i;
                    row.push(geometry.attributes.position.getY(index));
                }
                matrix.push(row);
            }
            const heightfieldShape = new CANNON.Heightfield(matrix, {
                elementSize: groundSize / groundSegments,
            });
            const groundBody = new CANNON.Body({
                mass: 0,
                material: groundMat,
                shape: heightfieldShape,
            });
            groundBody.position.set(-groundSize / 2, 0, groundSize / 2);
            groundBody.quaternion.setFromAxisAngle(
                new CANNON.Vec3(1, 0, 0),
                -Math.PI / 2
            );
            world.addBody(groundBody);
            const wallLength = 600;
            const wallHeight = 20;
            const wallThickness = 5;

            // Four walls: +X, -X, +Z, -Z
            const wallPositions = [
                { x: wallLength / 2, y: wallHeight / 2, z: 0 }, // +X
                { x: -wallLength / 2, y: wallHeight / 2, z: 0 }, // -X
                { x: 0, y: wallHeight / 2, z: wallLength / 2 }, // +Z
                { x: 0, y: wallHeight / 2, z: -wallLength / 2 }, // -Z
            ];
            const wallSizes = [
                [wallThickness, wallHeight, wallLength], // X walls
                [wallThickness, wallHeight, wallLength],
                [wallLength, wallHeight, wallThickness], // Z walls
                [wallLength, wallHeight, wallThickness],
            ];

            for (let i = 0; i < 4; i++) {
                const wallShape = new CANNON.Box(
                    new CANNON.Vec3(wallSizes[i][0] / 2, wallSizes[i][1] / 2, wallSizes[i][2] / 2)
                );
                const wallBody = new CANNON.Body({
                    mass: 0,
                    material: groundMat,
                    shape: wallShape,
                    position: new CANNON.Vec3(wallPositions[i].x, wallPositions[i].y, wallPositions[i].z),
                });
                world.addBody(wallBody);
            }
        }

        function createSportsCar(wheelMat) {
            car = new THREE.Group();
            scene.add(car);

            // Car body (sleek and low)
            const bodyMesh = new THREE.Mesh(
                new THREE.BoxGeometry(2.8, 0.7, 5.2),
                new THREE.MeshStandardMaterial({
                    color: 0x1565c0, // blue
                    roughness: 0.3,
                    metalness: 0.7,
                })
            );
            bodyMesh.castShadow = true;
            car.add(bodyMesh);

            // Cabin (windshield area)
            const cabinMesh = new THREE.Mesh(
                new THREE.BoxGeometry(1.6, 0.6, 2.2),
                new THREE.MeshStandardMaterial({
                    color: 0xeeeeee,
                    roughness: 0.1,
                    metalness: 0.9,
                    transparent: true,
                    opacity: 0.7,
                })
            );
            cabinMesh.position.set(0, 0.6, -0.5);
            cabinMesh.castShadow = true;
            car.add(cabinMesh);

            // Spoiler
            const spoiler = new THREE.Mesh(
                new THREE.BoxGeometry(1.4, 0.1, 0.5),
                new THREE.MeshStandardMaterial({ color: 0x222222, metalness: 0.8 })
            );
            spoiler.position.set(0, 0.5, 2.5);
            spoiler.castShadow = true;
            car.add(spoiler);

            // Lower, heavier, and wider chassis for stability
            const chassisShape = new CANNON.Box(new CANNON.Vec3(1.4, 0.3, 2.3));
            const chassisBody = new CANNON.Body({ mass: 500 }); // heavier for sports car
            chassisBody.addShape(chassisShape);
            chassisBody.position.set(0, 2, 0); // Start above ground
            // Lower center of mass
            chassisBody.shapeOffsets[0].set(0, -0.5, 0);
            chassisBody.updateMassProperties();

            vehicle = new CANNON.RaycastVehicle({
                chassisBody,
                indexUpAxis: 1,
                indexForwardAxis: 2,
                indexRightAxis: 0,
            });

            // Wheel options for sports car: wide, low, stiff
            const wheelOptions = {
                directionLocal: new CANNON.Vec3(0, -1, 0),
                suspensionStiffness: 60,
                frictionSlip: 2.5,
                dampingRelaxation: 2.5,
                dampingCompression: 4.5,
                maxSuspensionForce: 100000,
                rollInfluence: 0.01,
                axleLocal: new CANNON.Vec3(1, 0, 0),
                chassisConnectionPointLocal: new CANNON.Vec3(),
                customSlidingRotationalSpeed: -30,
                useCustomSlidingRotationalSpeed: true,
                radius: 0.55,
                suspensionRestLength: 0.35,
            };

            // Wider wheelbase and longer car
            const wheelBaseX = 1.5;
            const wheelBaseZ = 2.1;

            // Front left
            wheelOptions.chassisConnectionPointLocal.set(
                wheelBaseX,
                -0.2,
                wheelBaseZ
            );
            vehicle.addWheel(wheelOptions);
            // Front right
            wheelOptions.chassisConnectionPointLocal.set(
                -wheelBaseX,
                -0.2,
                wheelBaseZ
            );
            vehicle.addWheel(wheelOptions);
            // Rear left
            wheelOptions.chassisConnectionPointLocal.set(
                wheelBaseX,
                -0.2,
                -wheelBaseZ
            );
            vehicle.addWheel(wheelOptions);
            // Rear right
            wheelOptions.chassisConnectionPointLocal.set(
                -wheelBaseX,
                -0.2,
                -wheelBaseZ
            );
            vehicle.addWheel(wheelOptions);

            vehicle.addToWorld(world);

            // Sporty wheels
            wheelMeshes = [];
            vehicle.wheelInfos.forEach((wheel) => {
                const cylinder = new THREE.CylinderGeometry(
                    wheel.radius,
                    wheel.radius,
                    0.5,
                    32
                );
                cylinder.rotateZ(Math.PI / 2);
                const mesh = new THREE.Mesh(
                    cylinder,
                    new THREE.MeshStandardMaterial({
                        color: 0x222222,
                        roughness: 0.5,
                        metalness: 0.7,
                    })
                );
                mesh.castShadow = true;
                wheelMeshes.push(mesh);
                scene.add(mesh);
            });
        }
        function createTrees() {
            const count = 100,
                size = 200;
            const trunkMat = new THREE.MeshStandardMaterial({ color: 0x8b4513 });
            const leafMat = new THREE.MeshStandardMaterial({ color: 0x228b22 });
            const trunkGeo = new THREE.CylinderGeometry(0.2, 0.3, 2.5, 8);
            const leafGeo = new THREE.DodecahedronGeometry(1.5);

            for (let i = 0; i < count; i++) {
                const trunk = new THREE.Mesh(trunkGeo, trunkMat);
                const leaves = new THREE.Mesh(leafGeo, leafMat);
                trunk.castShadow = true;
                leaves.castShadow = true;
                leaves.position.y = 2.5;

                const tree = new THREE.Group();
                tree.add(trunk, leaves);

                const x = (Math.random() - 0.5) * size * 0.95;
                const z = (Math.random() - 0.5) * size * 0.95;
                if (Math.abs(x) < 15 && Math.abs(z) < 15) continue;

                const y = 0;
                tree.position.set(x, y + 1.1, z);
                tree.rotation.y = Math.random() * Math.PI;
                tree.scale.setScalar(0.8 + Math.random() * 0.4);
                scene.add(tree);

                // --- Add Cannon.js physics body for the trunk ---
                const scale = tree.scale.x;
                const trunkHeight = 2.5 * scale;
                const trunkRadiusTop = 0.2 * scale;
                const trunkRadiusBottom = 0.3 * scale;

                const trunkShape = new CANNON.Cylinder(
                    trunkRadiusTop,
                    trunkRadiusBottom,
                    trunkHeight,
                    8
                );
                const trunkBody = new CANNON.Body({
                    mass: 0, // static
                    shape: trunkShape,
                    position: new CANNON.Vec3(x, y + trunkHeight / 2, z),
                });
                trunkBody.quaternion.setFromAxisAngle(
                    new CANNON.Vec3(0, 1, 