<!DOCTYPE html>
<html lang="en">
    <head>
        <title>Conway's Game of Life</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta name="author" content="`ᴴᵗᵗየ">
        <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.2/p5.min.js"></script>
        <style>
            * { 
                margin: 0; 
                padding: 0; 
                box-sizing: border-box;
            } 
            
            html, body { 
                width: 100%; 
                height: 100%; 
                overflow: hidden; 
                background: #000;
            } 
            
            canvas { 
                display: block; 
            }
        </style>
    </head>
    <body>
        <script>
            // Configuration constants
            const CELL_SIZE = 4; // Size of each cell in pixels
            const MAX_CELL_AGE = 90; // Maximum age for color gradient
            const RIPPLES_DECAY_RATE = 0.95; // How quickly ripples fade
            const RIPPLES_EXPANSION_RATE = 0.5; // How fast ripples expand
            const RIPPLES_STRENGTH_THRESHOLD = 0.01; // When to remove a ripple
            const RIPPLES_ACTIVATION_THRESHOLD = 0.1; // Strength needed to activate cells

            // Game state variables
            let currentGrid = [];
            let previousGrid = [];
            let cellAgeGrid = [];
            let canvasWidth, canvasHeight;
            let gridWidth, gridHeight;
            let cellRenderWidth, cellRenderHeight;
            let rippleEffects = [];

            /**
             * Initializes the p5.js canvas and game state
             */
            function setup() {
                // Create canvas first
                createCanvas(windowWidth, windowHeight);
                pixelDensity(1);
                canvasWidth = windowWidth;
                canvasHeight = windowHeight; 
                colorMode(HSB, 1, 1, 1); // Use HSB color space for age-based coloring
                initializeGameState();
            }

            /**
             * Initializes or resets the game grids and ripple effects
             */
            function initializeGameState() {
                currentGrid = [];
                previousGrid = [];
                cellAgeGrid = [];
                rippleEffects = [];
                
                // Calculate grid dimensions based on canvas and cell size
                gridWidth = Math.floor(canvasWidth / CELL_SIZE);
                gridHeight = Math.floor(canvasHeight / CELL_SIZE);
                
                // Calculate actual cell render size to fill canvas
                cellRenderWidth = canvasWidth / gridWidth;
                cellRenderHeight = canvasHeight / gridHeight;

                // Initialize grids with default values
                for (let x = 0; x < gridWidth; x++) {
                    currentGrid.push(new Array(gridHeight).fill(0));
                    previousGrid.push(new Array(gridHeight).fill(0));
                    cellAgeGrid.push(new Array(gridHeight).fill(0));
                    
                    // Create a small random pattern in the center
                    const patternRadius = 4;
                    for (let y = 0; y < gridHeight; y++) {
                        if (Math.abs(x - gridWidth/2) < patternRadius && 
                            Math.abs(y - gridHeight/2) < patternRadius && 
                            random() < 0.5) {
                            previousGrid[x][y] = 1;
                            cellAgeGrid[x][y] = 1;
                        }
                    }
                }
            }

            /**
             * Main animation loop - updates and renders the game state
             */
            function draw() {
                background(0);
                scale(cellRenderWidth, cellRenderHeight);
                noStroke();

                updateRippleEffects();
                updateGameGrid();
                renderCells();
                
                // Swap current and previous grids for next iteration
                [currentGrid, previousGrid] = [previousGrid, currentGrid];
            }

            /**
             * Updates all active ripple effects
             */
            function updateRippleEffects() {
                for (let i = rippleEffects.length - 1; i >= 0; i--) {
                    const ripple = rippleEffects[i];
                    ripple.strength *= RIPPLES_DECAY_RATE;
                    ripple.radius += RIPPLES_EXPANSION_RATE;
                    
                    // Remove faded ripples
                    if (ripple.strength < RIPPLES_STRENGTH_THRESHOLD) {
                        rippleEffects.splice(i, 1);
                    }
                }
            }

            /**
             * Updates the game grid according to Conway's rules with ripple influence
             */
            function updateGameGrid() {
                for (let x = 0; x < gridWidth; x++) {
                    for (let y = 0; y < gridHeight; y++) {
                        const isAlive = previousGrid[x][y] === 1;
                        const liveNeighbors = countLiveNeighbors(x, y);
                        const rippleInfluence = calculateRippleInfluence(x, y);
                        
                        // Apply modified Conway's rules with ripple influence
                        if (!isAlive && (liveNeighbors === 3 || rippleInfluence > RIPPLES_ACTIVATION_THRESHOLD)) {
                            currentGrid[x][y] = 1;
                            cellAgeGrid[x][y] = 1;
                        } else if (isAlive && (liveNeighbors < 2 || liveNeighbors > 3)) {
                            currentGrid[x][y] = 0;
                            cellAgeGrid[x][y] = 0;
                        } else if (isAlive) {
                            currentGrid[x][y] = 1;
                            cellAgeGrid[x][y]++;
                        } else {
                            currentGrid[x][y] = 0;
                        }
                    }
                }
            }

            /**
             * Counts live neighbors for a cell (Moore neighborhood)
             * @param {number} x - X coordinate of the cell
             * @param {number} y - Y coordinate of the cell
             * @returns {number} Count of live neighbors (0-8)
             */
            function countLiveNeighbors(x, y) {
                let count = 0;
                
                for (let dx = -1; dx <= 1; dx++) {
                    for (let dy = -1; dy <= 1; dy++) {
                        if (dx === 0 && dy === 0) continue; // Skip self
                        
                        const nx = x + dx;
                        const ny = y + dy;
                        
                        if (nx >= 0 && nx < gridWidth && ny >= 0 && ny < gridHeight && 
                            previousGrid[nx][ny] === 1) {
                            count++;
                        }
                    }
                }
                
                return count;
            }

            /**
             * Calculates ripple influence at a specific grid position
             * @param {number} x - X coordinate
             * @param {number} y - Y coordinate
             * @returns {number} Total ripple influence strength
             */
            function calculateRippleInfluence(x, y) {
                let totalInfluence = 0;
                
                for (const ripple of rippleEffects) {
                    const distance = dist(x, y, ripple.x, ripple.y);
                    if (distance < ripple.radius) {
                        const influence = ripple.strength * (1 - distance / ripple.radius);
                        totalInfluence += influence;
                    }
                }
                
                return totalInfluence;
            }

            /**
             * Renders all living cells with age-based coloring
             */
            function renderCells() {
                for (let x = 0; x < gridWidth; x++) {
                    for (let y = 0; y < gridHeight; y++) {
                        if (currentGrid[x][y] === 1) {
                            // Color based on cell age (hue cycles with age)
                            const hue = map(
                                Math.min(cellAgeGrid[x][y], MAX_CELL_AGE), 
                                0, 
                                MAX_CELL_AGE, 
                                0, 
                                1
                            );
                            fill(hue, 1, 1);
                            rect(x, y, 1, 1);
                        }
                    }
                }
            }

            /**
             * Handles window resize events
             */
            function windowResized() {
                resizeCanvas(windowWidth, windowHeight);
                canvasWidth = windowWidth;
                canvasHeight = windowHeight;
                initializeGameState();
            }

            /**
             * Handles mouse click/touch interactions
             * @param {number} x - Screen X coordinate
             * @param {number} y - Screen Y coordinate
             */
            function handleInteraction(x, y) {
                const gridX = Math.floor(x / cellRenderWidth);
                const gridY = Math.floor(y / cellRenderHeight);
                
                if (gridX >= 0 && gridX < gridWidth && gridY >= 0 && gridY < gridHeight) {
                    rippleEffects.push({
                        x: gridX,
                        y: gridY,
                        radius: 1,
                        strength: 1
                    });
                }
            }

            // Event handlers
            function mousePressed() {
                handleInteraction(mouseX, mouseY);
            }

            function touchStarted() {
                if (touches.length > 0) {
                    handleInteraction(touches[0].x, touches[0].y);
                }
                return false; // Prevent default touch behavior
            }
        </script>
    </body>
</html>