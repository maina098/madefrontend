<!DOCTYPE html>
<html>
    <head>
        <title>Shape Shifter</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
        <meta name="author" content="`ᴴᵗᵗየ">
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }

            body {
                height: 100vh;
                display: grid;
                place-items: center;
                background: #1A1A2E;
                position: relative;
                user-select: none;
                -webkit-user-select: none;
                -webkit-tap-highlight-color: transparent;
                touch-action: none;
            }

            svg {
                width: 100vw;
                height: 100vh;
                overflow: visible;
            }

            .shape-button {
                position: absolute;
                bottom: 20px;
                left: 50%;
                transform: translateX(-50%);
                padding: 10px 20px;
                background: rgba(255, 255, 255, 0.2);
                border: 1px solid rgba(255, 255, 255, 0.4);
                border-radius: 20px;
                color: #fff;
                font-family: Arial, sans-serif;
                font-size: 16px;
                cursor: pointer;
                transition: background 0.3s;
            }

            .shape-button:hover {
                background: rgba(255, 255, 255, 0.3);
            }
        </style>
    </head>
    <body>
        <button class="shape-button">Change Shape</button>
        <script type="module">
            import { SVG } from "https://cdn.skypack.dev/@svgdotjs/svg.js";
            import {
                createVoronoiTessellation,
                randomBias,
                randomSnap
            } from "https://cdn.skypack.dev/@georgedoescode/generative-utils";

            const width = 196;
            const height = 196;

            const svg = SVG()
                .viewbox(0, 0, width, height)
                .attr("preserveAspectRatio", "xMidYMid slice");

            svg.addTo("body");

            const focus = {
                x: randomSnap(0, width, width / 2),
                y: randomSnap(0, height, height / 2)
            };

            const points = [...Array(1024)].map(() => {
                return {
                    x: randomBias(0, width, focus.x, 1),
                    y: randomBias(0, height, focus.y, 1)
                };
            });

            const tessellation = createVoronoiTessellation({
                width,
                height,
                points,
                relaxIterations: 6
            });

            const debug = false;

            // Background gradient
            const gradient = svg.gradient('radial', function(add) {
                add.stop(0, '#4A3F8A');
                add.stop(1, '#16213E');
            });
            svg.rect(width, height).fill(gradient);

            // Shape types and current index
            const shapes = ['circle', 'hexagon', 'triangle', 'square', 'pentagon', 'heptagon', 'octagon', 'star', 'diamond', 'cross'];
            let currentShapeIndex = 0;

            // Function to draw shapes based on type
            function drawShapes(shapeType) {
                svg.clear();
                svg.rect(width, height).fill(gradient);

                tessellation.cells.forEach((cell, index) => {
                    if (debug) {
                        svg.polygon(cell.points).fill("none").stroke("#E94560");
                    }

                    const radius = cell.innerCircleRadius;
                    const cx = cell.centroid.x;
                    const cy = cell.centroid.y;

                    switch (shapeType) {
                        case 'circle':
                            svg
                                .circle(radius * 2)
                                .cx(cx)
                                .cy(cy)
                                .fill(`hsl(${index % 360}, 70%, 60%)`)
                                .scale(0.8)
                                .opacity(0.8);
                            break;
                        case 'hexagon':
                            svg
                                .polygon([
                                    [0, radius],
                                    [radius * 0.866, radius * 0.5],
                                    [radius * 0.866, -radius * 0.5],
                                    [0, -radius],
                                    [-radius * 0.866, -radius * 0.5],
                                    [-radius * 0.866, radius * 0.5]
                                ])
                                .cx(cx)
                                .cy(cy)
                                .fill('#0F3460')
                                .stroke({ color: '#E94560', width: 0.5 })
                                .scale(0.7)
                                .opacity(0.6);
                            break;
                        case 'triangle':
                            svg
                                .polygon([
                                    [0, -radius],
                                    [radius * 0.866, radius * 0.5],
                                    [-radius * 0.866, radius * 0.5]
                                ])
                                .cx(cx)
                                .cy(cy)
                                .fill('#FF6B6B')
                                .stroke({ color: '#FFE66D', width: 0.5 })
                                .scale(0.75)
                                .opacity(0.7);
                            break;
                        case 'square':
                            svg
                                .rect(radius * 1.8, radius * 1.8)
                                .cx(cx)
                                .cy(cy)
                                .fill('#4ECDC4')
                                .stroke({ color: '#1A535C', width: 0.5 })
                                .scale(0.7)
                                .opacity(0.65);
                            break;
                        case 'pentagon':
                            svg
                                .polygon([
                                    [0, -radius],
                                    [radius * 0.951, -radius * 0.309],
                                    [radius * 0.588, radius * 0.809],
                                    [-radius * 0.588, radius * 0.809],
                                    [-radius * 0.951, -radius * 0.309]
                                ])
                                .cx(cx)
                                .cy(cy)
                                .fill('#FF9F43')
                                .stroke({ color: '#F48C06', width: 0.5 })
                                .scale(0.75)
                                .opacity(0.7);
                            break;
                        case 'heptagon':
                            svg
                                .polygon([
                                    [0, -radius],
                                    [radius * 0.901, -radius * 0.434],
                                    [radius * 0.623, radius * 0.782],
                                    [0, radius * 0.975],
                                    [-radius * 0.623, radius * 0.782],
                                    [-radius * 0.901, -radius * 0.434],
                                    [-radius * 0.223, -radius * 0.975]
                                ])
                                .cx(cx)
                                .cy(cy)
                                .fill('#6B7280')
                                .stroke({ color: '#374151', width: 0.5 })
                                .scale(0.7)
                                .opacity(0.6);
                            break;
                        case 'octagon':
                            svg
                                .polygon([
                                    [radius * 0.383, -radius * 0.924],
                                    [radius * 0.924, -radius * 0.383],
                                    [radius * 0.924, radius * 0.383],
                                    [radius * 0.383, radius * 0.924],
                                    [-radius * 0.383, radius * 0.924],
                                    [-radius * 0.924, radius * 0.383],
                                    [-radius * 0.924, -radius * 0.383],
                                    [-radius * 0.383, -radius * 0.924]
                                ])
                                .cx(cx)
                                .cy(cy)
                                .fill('#9D4EDD')
                                .stroke({ color: '#7209B7', width: 0.5 })
                                .scale(0.7)
                                .opacity(0.65);
                            break;
                        case 'star':
                            svg
                                .polygon([
                                    [0, -radius],
                                    [radius * 0.224, -radius * 0.309],
                                    [radius * 0.951, -radius * 0.309],
                                    [radius * 0.363, radius * 0.118],
                                    [radius * 0.588, radius * 0.809],
                                    [0, radius * 0.382],
                                    [-radius * 0.588, radius * 0.809],
                                    [-radius * 0.363, radius * 0.118],
                                    [-radius * 0.951, -radius * 0.309],
                                    [-radius * 0.224, -radius * 0.309]
                                ])
                                .cx(cx)
                                .cy(cy)
                                .fill('#F72585')
                                .stroke({ color: '#7209B7', width: 0.5 })
                                .scale(0.65)
                                .opacity(0.7);
                            break;
                        case 'diamond':
                            svg
                                .polygon([
                                    [0, -radius * 1.2],
                                    [radius * 0.8, 0],
                                    [0, radius * 1.2],
                                    [-radius * 0.8, 0]
                                ])
                                .cx(cx)
                                .cy(cy)
                                .fill('#2A9D8F')
                                .stroke({ color: '#264653', width: 0.5 })
                                .scale(0.7)
                                .opacity(0.65);
                            break;
                        case 'cross':
                            svg
                                .polygon([
                                    [-radius * 0.3, -radius],
                                    [radius * 0.3, -radius],
                                    [radius * 0.3, -radius * 0.3],
                                    [radius, -radius * 0.3],
                                    [radius, radius * 0.3],
                                    [radius * 0.3, radius * 0.3],
                                    [radius * 0.3, radius],
                                    [-radius * 0.3, radius],
                                    [-radius * 0.3, radius * 0.3],
                                    [-radius, radius * 0.3],
                                    [-radius, -radius * 0.3],
                                    [-radius * 0.3, -radius * 0.3]
                                ])
                                .cx(cx)
                                .cy(cy)
                                .fill('#E9C46A')
                                .stroke({ color: '#E76F51', width: 0.5 })
                                .scale(0.7)
                                .opacity(0.6);
                            break;
                    }
                });
            }

            // Initial draw
            drawShapes(shapes[currentShapeIndex]);

            // Button event listener
            const button = document.querySelector('.shape-button');
            button.addEventListener('click', () => {
                currentShapeIndex = (currentShapeIndex + 1) % shapes.length;
                drawShapes(shapes[currentShapeIndex]);
                button.textContent = `Shape: ${shapes[currentShapeIndex]}`;
            });

            // Set initial button text
            button.textContent = `Shape: ${shapes[currentShapeIndex]}`;
        </script>
    </body>
</html>