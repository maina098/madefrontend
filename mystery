<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Name Aesthetic Generator</title>
  <style>
    :root{
      --bg:#0f172a; --card:#0b1220; --accent1:#ff7ab6; --accent2:#7be0ff;
      color-scheme: dark;
    }
    *{box-sizing:border-box}
    body{
      margin:0; font-family:Inter, system-ui, -apple-system, 'Segoe UI', Roboto, 'Helvetica Neue', Arial;
      background:linear-gradient(180deg,var(--bg),#071029 80%); color:#e6eef8; min-height:100vh; display:flex; align-items:center; justify-content:center; padding:24px;
    }
    .card{width:100%; max-width:920px; background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01)); border-radius:16px; padding:20px; box-shadow:0 8px 30px rgba(2,6,23,0.6);}
    header{display:flex; gap:12px; align-items:center; justify-content:space-between}
    header h1{font-size:20px; margin:0}
    .controls{display:flex; gap:12px; flex-wrap:wrap; margin-top:16px}
    input[type=text]{flex:1; min-width:220px; padding:10px 12px; border-radius:10px; border:1px solid rgba(255,255,255,0.06); background:transparent; color:inherit; font-size:16px}
    button{padding:10px 12px; border-radius:10px; border:0; background:linear-gradient(90deg,var(--accent1),var(--accent2)); color:#041027; font-weight:700; cursor:pointer}
    .styles{display:flex; gap:10px; margin-top:14px; flex-wrap:wrap}
    .style-btn{padding:8px 10px; border-radius:10px; background:rgba(255,255,255,0.02); border:1px solid rgba(255,255,255,0.03); cursor:pointer}
    .preview-wrapper{display:flex; gap:20px; margin-top:18px; align-items:flex-start}
    .preview{flex:1; min-height:180px; background:linear-gradient(180deg, rgba(10,14,24,0.6), rgba(8,10,17,0.35)); border-radius:12px; padding:18px; display:flex; align-items:center; justify-content:center; text-align:center}
    .preview .name{font-size:44px; line-height:1.05; word-break:break-word}
    .options{width:260px}
    label{display:block; font-size:13px; margin-bottom:6px; color: #cfe6ff}
    select, .emoji-input{width:100%; padding:8px 10px; border-radius:8px; border:1px solid rgba(255,255,255,0.04); background:transparent; color:inherit}
    .small{font-size:13px; opacity:0.9}
    .actions{display:flex; gap:8px; margin-top:12px}
    .copy{background:transparent; border:1px solid rgba(255,255,255,0.06); color:inherit}
    .download{background:linear-gradient(90deg,#7be0ff,#8a7bff); color:#041027}
    footer{margin-top:14px; font-size:13px; color:#9fbce8}
    /* Styles for special classes */
    .fw {font-family: 'Noto Sans', Arial;}
    .small-caps {font-variant:small-caps; font-weight:600}
    .cursive {font-style:italic; font-family: 'Segoe Script', 'Brush Script MT', cursive}
    .spaced {letter-spacing:8px; text-transform:uppercase}
    .surround {padding:6px 12px; border-radius:10px;}@media (max-width:820px){ .preview-wrapper{flex-direction:column} .options{width:100%} }

  </style>
</head>
<body>
  <div class="card">
    <header>
      <h1>Name Aesthetic Generator — cute & SoloLearn-ready ✨</h1>
      <div class="small">Make aesthetic names → copy or download</div>
    </header><div class="controls">
  <input id="nameInput" type="text" placeholder="Type a name (e.g. Kia)" value="Kia" />
  <button id="generateBtn">Generate</button>
  <button id="randomBtn" title="Randomize style">🎲</button>
</div>

<div class="styles" aria-hidden>
  <button class="style-btn" data-style="fullwidth">Fullwidth</button>
  <button class="style-btn" data-style="smallcaps">Small Caps</button>
  <button class="style-btn" data-style="spaced">Spaced Upper</button>
  <button class="style-btn" data-style="cursive">Cursive</button>
  <button class="style-btn" data-style="surround">Stars & Emojis</button>
</div>

<div class="preview-wrapper">
  <div class="preview" id="previewArea">
    <div class="name" id="previewText">Kia</div>
  </div>

  <aside class="options">
    <label>Emoji (optional)</label>
    <input class="emoji-input" id="emojiInput" placeholder="e.g. 🌸✨💫 (comma separated)" />

    <label class="small" style="margin-top:10px">Font size</label>
    <select id="fontSize">
      <option value="40">Large</option>
      <option value="32">Medium</option>
      <option value="24">Small</option>
    </select>

    <label class="small" style="margin-top:10px">Background vibe</label>
    <select id="bgSelect">
      <option value="gradient1">Pink / Blue</option>
      <option value="gradient2">Purple / Indigo</option>
      <option value="gradient3">Green / Teal</option>
      <option value="plain">Plain</option>
    </select>

    <div class="actions">
      <button class="copy" id="copyBtn">Copy</button>
      <button class="download" id="downloadBtn">Download PNG</button>
    </div>

    <div style="margin-top:10px; font-size:13px">Tip: Click any style button to preview. Then <strong>Copy</strong> or <strong>Download</strong>.</div>
  </aside>
</div>

<footer>Made for SoloLearn — customize colors and fonts easily.</footer>

  </div><canvas id="exportCanvas" width="1200" height="400" style="display:none"></canvas>

  <script>
    const nameInput = document.getElementById('nameInput');
    const emojiInput = document.getElementById('emojiInput');
    const previewText = document.getElementById('previewText');
    const previewArea = document.getElementById('previewArea');
    const generateBtn = document.getElementById('generateBtn');
    const randomBtn = document.getElementById('randomBtn');
    const copyBtn = document.getElementById('copyBtn');
    const downloadBtn = document.getElementById('downloadBtn');
    const fontSizeSel = document.getElementById('fontSize');
    const bgSelect = document.getElementById('bgSelect');
    const canvas = document.getElementById('exportCanvas');

    // Helpers for transformations
    function toFullwidth(text){
      // maps ascii to fullwidth forms where possible
      return Array.from(text).map(ch=>{
        const code = ch.charCodeAt(0);
        if(code>=33 && code<=126) return String.fromCharCode(code + 0xFEE0);
        return ch;
      }).join('');
    }

    function toSpacedUpper(text){
      return text.toUpperCase().split('').join(' ');
    }

    function surroundWithSymbols(text, emojis){
      const left = emojis.length? emojis[0] + ' ' : '☆ ';
      const right = emojis.length? ' ' + emojis[emojis.length-1] : ' ☆';
      return `${left}${text}${right}`;
    }

    function applyStyle(style){
      // reset classes
      previewText.className = 'name';
      let raw = nameInput.value || '';
      const emojis = (emojiInput.value||'').split(',').map(s=>s.trim()).filter(Boolean);

      // Basic transformations that change characters
      let displayed = raw;
      if(style==='fullwidth') displayed = toFullwidth(raw);
      if(style==='spaced') displayed = toSpacedUpper(raw);
      if(style==='surround') displayed = surroundWithSymbols(raw, emojis);

      // font size
      const size = parseInt(fontSizeSel.value,10);
      previewText.style.fontSize = size + 'px';

      // apply CSS style classes
      if(style==='smallcaps') previewText.classList.add('small-caps');
      if(style==='cursive') previewText.classList.add('cursive');
      if(style==='spaced') previewText.classList.add('spaced');
      if(style==='fullwidth') previewText.classList.add('fw');
      if(style==='surround') previewText.classList.add('surround');

      // background
      if(bgSelect.value==='gradient1') previewArea.style.background = 'linear-gradient(180deg, rgba(10,8,30,0.6), rgba(3,8,25,0.4)), linear-gradient(90deg, rgba(255,122,180,0.06), rgba(123,224,255,0.03))';
      if(bgSelect.value==='gradient2') previewArea.style.background = 'linear-gradient(180deg, rgba(7,4,25,0.6), rgba(2,6,20,0.3)), linear-gradient(90deg, rgba(138,123,255,0.04), rgba(123,224,255,0.03))';
      if(bgSelect.value==='gradient3') previewArea.style.background = 'linear-gradient(180deg, rgba(2,22,18,0.7), rgba(1,10,12,0.35)), linear-gradient(90deg, rgba(120,255,198,0.03), rgba(60,180,120,0.02))';
      if(bgSelect.value==='plain') previewArea.style.background = '';

      previewText.textContent = displayed;
    }

    // Initialize default
    applyStyle('smallcaps');

    // Event listeners
    document.querySelectorAll('.style-btn').forEach(btn=>{
      btn.addEventListener('click', ()=> applyStyle(btn.dataset.style));
    });

    generateBtn.addEventListener('click', ()=> applyStyle('smallcaps'));
    randomBtn.addEventListener('click', ()=>{
      const styles = ['fullwidth','smallcaps','spaced','cursive','surround'];
      const pick = styles[Math.floor(Math.random()*styles.length)];
      // random emoji sample
      const sampleEmojis = ['🌸','✨','💫','🐾','🌙','⭐','🍃','🎐'];
      emojiInput.value = [sampleEmojis[Math.floor(Math.random()*sampleEmojis.length)], sampleEmojis[Math.floor(Math.random()*sampleEmojis.length)]].join(',');
      applyStyle(pick);
    });

    copyBtn.addEventListener('click', async ()=>{
      const text = previewText.textContent || '';
      try{
        await navigator.clipboard.writeText(text);
        copyBtn.textContent = 'Copied ✅';
        setTimeout(()=> copyBtn.textContent = 'Copy', 1500);
      }catch(e){
        alert('Cannot copy automatically — select and copy manually.');
      }
    });

    // Download as PNG by drawing onto a canvas
    downloadBtn.addEventListener('click', ()=>{
      const ctx = canvas.getContext('2d');
      const w = canvas.width = 1200;
      const h = canvas.height = 400;
      // background
      ctx.fillStyle = '#071029';
      ctx.fillRect(0,0,w,h);
      // draw text
      const text = previewText.textContent || '';
      const size = parseInt(fontSizeSel.value,10);
      ctx.font = `${size*1.5}px Arial`;
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      // add shadow
      ctx.shadowColor = 'rgba(0,0,0,0.6)';
      ctx.shadowBlur = 10;
      ctx.fillStyle = '#eaf6ff';
      ctx.fillText(text, w/2, h/2);

      // create link
      const link = document.createElement('a');
      link.href = canvas.toDataURL('image/png');
      link.download = (nameInput.value || 'name') + '-aesthetic.png';
      link.click();
    });

    // update preview when typing or changing options
    nameInput.addEventListener('input', ()=> applyStyle('smallcaps'));
    emojiInput.addEventListener('input', ()=> applyStyle('surround'));
    fontSizeSel.addEventListener('change', ()=> applyStyle('smallcaps'));
    bgSelect.addEventListener('change', ()=> applyStyle('smallcaps'));

  </script></body>
</html>