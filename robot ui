<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Find the Characters UI</title>
  <style>
    * {
      box-sizing: border-box;
    }

    body {
      margin: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(145deg, #0a0a0a, #1a1a1a);
      color: white;
      overflow-x: hidden;
      height: 100vh;
    }

    .ui-container {
      position: fixed;
      bottom: 0;
      width: 100%;
      background: rgba(25, 25, 25, 0.85);
      backdrop-filter: blur(12px);
      display: flex;
      justify-content: space-around;
      align-items: center;
      padding: 12px 0;
      z-index: 10;
      border-top: 1px solid #333;
      transition: opacity 0.5s ease;
    }

    .button {
      padding: 12px 18px;
      background: rgba(50, 50, 50, 0.8);
      border: 1px solid #666;
      border-radius: 12px;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 6px;
      font-size: 16px;
      box-shadow: 0 0 5px #00ffd5;
      user-select: none;
    }

    .button:hover {
      transform: scale(1.1);
      background: rgba(70, 70, 70, 0.95);
    }

    .auto-hide {
      opacity: 1;
    }

    .auto-hide.hidden {
      opacity: 0;
      pointer-events: none;
      transform: scale(0.8);
    }

    .library-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.96);
      overflow-y: auto;
      padding: 20px;
      display: none;
      flex-direction: column;
      z-index: 20;
      animation: fadeIn 0.4s ease forwards;
    }

    .library-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .close-btn {
      background: #ff3b3b;
      border: none;
      color: white;
      font-size: 24px;
      padding: 8px 14px;
      border-radius: 50%;
      cursor: pointer;
      transition: 0.3s;
    }

    .close-btn:hover {
      background: #ff1a1a;
      transform: rotate(90deg);
    }

    .section-title {
      font-size: 22px;
      margin: 25px 0 10px;
      border-left: 4px solid #888;
      padding-left: 10px;
    }

    .character-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
      gap: 16px;
      margin-bottom: 30px;
    }

    .character-card {
      position: relative;
      background: #222;
      border-radius: 14px;
      padding: 10px;
      text-align: center;
      transition: 0.3s ease;
      overflow: hidden;
      filter: brightness(0.3);
    }

    .character-card.found {
      filter: brightness(1);
      box-shadow: 0 0 10px #0ff;
    }

    .character-card .name {
      font-size: 14px;
      margin-top: 8px;
    }

    .character-card .rarity {
      font-size: 11px;
      margin-top: 4px;
      padding: 2px 6px;
      border-radius: 6px;
      display: inline-block;
    }

    .easy .rarity { background: #00cc66; }
    .medium .rarity { background: #ff9933; }
    .hard .rarity { background: #ff3333; }

    .character-card:hover {
      transform: scale(1.05);
    }

    .status {
      position: fixed;
      bottom: 75px;
      width: 100%;
      text-align: center;
      font-size: 16px;
      font-weight: bold;
      color: #00ffd5;
      text-shadow: 0 0 10px #00ffd5;
      letter-spacing: 1px;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
  </style>
</head>
<body>

  <!-- Bottom UI -->
  <div class="ui-container" id="uiContainer">
    <div class="button auto-hide" id="modeBtn" onclick="toggleMode()">
      <span id="modeIcon">âš¡</span>
      <span id="modeText">Walk</span>
    </div>
    <div class="button" onclick="openLibrary()">Library</div>
    <div class="button auto-hide" id="settingsBtn" onclick="openSettings()">Settings</div>
  </div>

  <!-- Status text -->
  <div class="status" id="statusText">Mode: Walking</div>

  <!-- Fullscreen character library -->
  <div class="library-overlay" id="libraryOverlay">
    <div class="library-header">
      <h2>Character Library</h2>
      <button class="close-btn" onclick="closeLibrary()">X</button>
    </div>

    <div class="section-title">Easy</div>
    <div class="character-grid" id="easyList"></div>

    <div class="section-title">Medium</div>
    <div class="character-grid" id="mediumList"></div>

    <div class="section-title">Hard</div>
    <div class="character-grid" id="hardList"></div>
  </div>

  <script>
    const characters = {
      easy: ['Noob', 'Bacon', 'Dog'],
      medium: ['Knight', 'Vampire', 'Alien'],
      hard: ['Dragon', 'Ninja', 'Demon']
    };

    const found = ['Noob', 'Knight'];
    let isWalking = true;

    function renderCharacters() {
      ['easy', 'medium', 'hard'].forEach(difficulty => {
        const container = document.getElementById(difficulty + 'List');
        characters[difficulty].forEach(name => {
          const card = document.createElement('div');
          card.className = `character-card ${difficulty} ${found.includes(name) ? 'found' : ''}`;
          card.innerHTML = `
            <div class="name">${name}</div>
            <div class="rarity">${difficulty.charAt(0).toUpperCase() + difficulty.slice(1)}</div>
          `;
          container.appendChild(card);
        });
      });
    }

    function openLibrary() {
      document.getElementById('libraryOverlay').style.display = 'flex';
    }

    function closeLibrary() {
      document.getElementById('libraryOverlay').style.display = 'none';
    }

    function toggleMode() {
      isWalking = !isWalking;
      const modeIcon = document.getElementById('modeIcon');
      const modeText = document.getElementById('modeText');
      const status = document.getElementById('statusText');

      if (isWalking) {
        modeIcon.textContent = 'âš¡';
        modeText.textContent = 'Walk';
        status.textContent = 'Mode: Walking';
      } else {
        modeIcon.textContent = 'ðŸš¶';
        modeText.textContent = 'Sprint';
        status.textContent = 'Mode: Sprinting!';
      }

      resetHideTimer(); // keeps the UI active when toggled
    }

    function openSettings() {
      alert("Settings opened!");
      resetHideTimer();
    }

    // Auto-hide UI buttons (except Library)
    let hideTimer;
    function resetHideTimer() {
      const elements = document.querySelectorAll('.auto-hide');
      elements.forEach(el => el.classList.remove('hidden'));
      clearTimeout(hideTimer);
      hideTimer = setTimeout(() => {
        elements.forEach(el => el.classList.add('hidden'));
      }, 3000);
    }

    document.addEventListener('mousemove', resetHideTimer);
    document.addEventListener('touchstart', resetHideTimer);

    renderCharacters();
    resetHideTimer();
  </script>

</body>
</html>